// Prisma schema 定义数据库模型
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  name          String
  role          Role      @default(USER)
  avatar        String?
  language      String    @default("en")
  currency      String    @default("USD")
  region        String?
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  consent       Consent?
  gameSessions  GameSession[]
  purchases     Purchase[]
  notifications Notification[]
}

enum Role {
  ADMIN
  OPERATOR
  DEVELOPER
  USER
}

// 用户隐私同意
model Consent {
  id            String   @id @default(uuid())
  userId        String   @unique
  marketing     Boolean  @default(false)
  analytics     Boolean  @default(false)
  thirdParty    Boolean  @default(false)
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 游戏模型
model Game {
  id              String        @id @default(uuid())
  title           String
  slug            String        @unique
  description     String
  thumbnail       String
  genre           String[]
  supportedLangs  String[]
  supportedCurrencies String[]
  isPublished     Boolean       @default(false)
  publishedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  versions        GameVersion[]
  currentVersion  GameVersion?
  currentVersionId String?
  events          Event[]
  virtualItems    VirtualItem[]
  leaderboards    Leaderboard[]
}

// 游戏版本
model GameVersion {
  id            String   @id @default(uuid())
  gameId        String
  versionNumber String
  description   String?
  fileUrl       String
  size          Int      // 文件大小(KB)
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  game          Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  deployments   Deployment[]
}

// 部署记录
model Deployment {
  id            String   @id @default(uuid())
  gameId        String
  versionId     String
  deployedBy    String
  status        DeploymentStatus @default(PENDING)
  notes         String?
  createdAt     DateTime @default(now())
  game          Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  version       GameVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
}

enum DeploymentStatus {
  PENDING
  SUCCESS
  FAILED
}

// 游戏事件
model Event {
  id            String   @id @default(uuid())
  gameId        String
  title         String
  description   String
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  game          Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

// 虚拟物品
model VirtualItem {
  id            String   @id @default(uuid())
  gameId        String
  name          String
  description   String?
  price         Float
  currency      String
  type          String
  imageUrl      String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  game          Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  purchases     Purchase[]
}

// 购买记录
model Purchase {
  id            String   @id @default(uuid())
  userId        String
  itemId        String
  amount        Float
  currency      String
  status        PurchaseStatus @default(PENDING)
  paymentId     String?
  gateway       String?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item          VirtualItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// 游戏会话
model GameSession {
  id            String   @id @default(uuid())
  userId        String
  gameId        String
  startTime     DateTime @default(now())
  endTime       DateTime?
  score         Int?
  level         Int?
  device        String?
  userAgent     String?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  game          Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

// 排行榜
model Leaderboard {
  id            String   @id @default(uuid())
  gameId        String
  name          String
  type          LeaderboardType @default(GLOBAL)
  period        Period   @default(DAILY)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  game          Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  entries       LeaderboardEntry[]
}

enum LeaderboardType {
  GLOBAL
  REGIONAL
  FRIENDS
}

enum Period {
  DAILY
  WEEKLY
  MONTHLY
  ALL_TIME
}

// 排行榜条目
model LeaderboardEntry {
  id            String   @id @default(uuid())
  leaderboardId String
  userId        String
  score         Int
  rank          Int
  updatedAt     DateTime @updatedAt
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([leaderboardId, userId])
}

// 通知
model Notification {
  id            String   @id @default(uuid())
  userId        String
  title         String
  content       String
  type          NotificationType
  isRead        Boolean  @default(false)
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  GAME_UPDATE
  EVENT
  PROMOTION
  PURCHASE
  SYSTEM
}
